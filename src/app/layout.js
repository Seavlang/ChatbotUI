"use client";

import localFont from "next/font/local";
import "./globals.css";
import { Toaster } from "react-hot-toast";
import { SessionProvider } from "next-auth/react";
import { useState, useEffect } from "react";
import { SessionsProvider } from "./(playground)/components/SessionProvider";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export default function RootLayout({ children }) {
  const [darkMode, setDarkMode] = useState(false); // State for dark mode

  // Toggle Theme
  const toggleTheme = () => {
    const html = document.documentElement;
    if (darkMode) {
      html.classList.remove("dark");
      localStorage.setItem("theme", "light");
    } else {
      html.classList.add("dark");
      localStorage.setItem("theme", "dark");
    }
    setDarkMode(!darkMode);
  };

  // Initialize theme from localStorage on mount
  useEffect(() => {
    const storedTheme = localStorage.getItem("theme") || "light";
    const html = document.documentElement;
    if (storedTheme === "dark") {
      html.classList.add("dark");
      setDarkMode(true);
    } else {
      html.classList.remove("dark");
      setDarkMode(false);
    }
  }, []); // Empty dependency array ensures this runs only once

  return (
    <html lang="en">
      <head>
        <title>TexBot</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" sizes="32x32" type="image/png" />
        <link rel="icon" href="/logo.png" sizes="48x48" type="image/png" />
        <link rel="icon" href="/logo.png" sizes="96x96" type="image/png" />
        <link rel="icon" href="/favicon.ico" type="image/x-icon" />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-white dark:bg-gray-900 text-black dark:text-white`}
      >
        <Toaster />
        <SessionProvider>
          <SessionsProvider>
            {children}
          </SessionsProvider>
        </SessionProvider>
      </body>
    </html>
  );
}
